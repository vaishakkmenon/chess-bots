# File to store bitboard constants

WHITE, BLACK = 0, 1

WHITE_PAWN, WHITE_KNIGHT, WHITE_BISHOP, WHITE_ROOK, WHITE_QUEEN, WHITE_KING = (
    range(6)
)
BLACK_PAWN, BLACK_KNIGHT, BLACK_BISHOP, BLACK_ROOK, BLACK_QUEEN, BLACK_KING = (
    range(6, 12)
)

PIECE_CHARS = "PNBRQKpnbrqk"
PIECE_INDICES = [
    WHITE_PAWN,
    WHITE_KNIGHT,
    WHITE_BISHOP,
    WHITE_ROOK,
    WHITE_QUEEN,
    WHITE_KING,
    BLACK_PAWN,
    BLACK_KNIGHT,
    BLACK_BISHOP,
    BLACK_ROOK,
    BLACK_QUEEN,
    BLACK_KING,
]

PIECE_MAP = dict(zip(PIECE_CHARS, PIECE_INDICES))
INV_PIECE_MAP = {v: k for k, v in PIECE_MAP.items()}

INITIAL_MASKS = [
    0x000000000000FF00,  # WHITE_PAWN
    0x0000000000000042,  # WHITE_KNIGHT
    0x0000000000000024,  # WHITE_BISHOP
    0x0000000000000081,  # WHITE_ROOK
    0x0000000000000008,  # WHITE_QUEEN
    0x0000000000000010,  # WHITE_KING
    0x00FF000000000000,  # BLACK_PAWN
    0x4200000000000000,  # BLACK_KNIGHT
    0x2400000000000000,  # BLACK_BISHOP
    0x8100000000000000,  # BLACK_ROOK
    0x0800000000000000,  # BLACK_QUEEN
    0x1000000000000000,  # BLACK_KING
]

KNIGHT_OFFSETS = (-17, -15, -10, -6, 6, 10, 15, 17)
BISHOP_OFFSETS = (9, 7, -7, -9)
ROOK_OFFSETS = (1, -1, 8, -8)
KING_OFFSETS = (-1, 7, 8, 9, 1, -9, -8, -7)

FILE_A = 0x0101010101010101
FILE_H = FILE_A << 7

# Mask for only integers from 0 to 63
MASK_64 = (1 << 64) - 1  # 0xFFFFFFFFFFFFFFFF
# Rank masks
RANK_2 = 0x000000000000FF00  # white starting pawns
RANK_4 = 0x00000000FF000000  # (black pawns capturing en passant)
RANK_5 = 0x000000FF00000000  # (white pawns capturing en passant)
RANK_7 = 0x00FF000000000000  # black starting pawns

# Castling‐rights bitflags
CASTLE_WHITE_KINGSIDE = 0b0010  # ‘K’
CASTLE_WHITE_QUEENSIDE = 0b0001  # ‘Q’
CASTLE_BLACK_KINGSIDE = 0b1000  # ‘k’
CASTLE_BLACK_QUEENSIDE = 0b0100  # ‘q’

# A convenience mask for “all castling allowed”:
CASTLE_ALL = (
    CASTLE_WHITE_KINGSIDE
    | CASTLE_WHITE_QUEENSIDE
    | CASTLE_BLACK_KINGSIDE
    | CASTLE_BLACK_QUEENSIDE
)
