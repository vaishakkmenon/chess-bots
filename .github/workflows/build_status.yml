# .github/workflows/build_status.yml
name: Build Status

on:
  push:
    paths:
      - "python-implementation/**"
      - "rust-implementation/**"
  pull_request:
    paths:
      - "python-implementation/**"
      - "rust-implementation/**"

jobs:
  # ───────────────────────────────────────────────────────────────────────────────
  # 1) Detect which parts changed
  paths-filter:
    name: Detect changed areas
    runs-on: ubuntu-latest
    outputs:
      python-changed: ${{ steps.filter.outputs.python }}
      rust-changed: ${{ steps.filter.outputs.rust }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            python:
              - 'python-implementation/**'
            rust:
              - 'rust-implementation/**'

  # ───────────────────────────────────────────────────────────────────────────────
  # 2) Python Tests (only if python-implementation/** changed)
  python-tests:
    name: Python 🐍 Tests
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.python-changed == 'true'
    strategy:
      matrix:
        python-version: [3.13]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set PYTHONPATH so tests can import `engine`
        run: echo "PYTHONPATH=${{ github.workspace }}/python-implementation" >> $GITHUB_ENV

      - name: Run pytest
        run: pytest --maxfail=1 --disable-warnings -q

  # ───────────────────────────────────────────────────────────────────────────────
  # 3) Rust Tests (only if rust-implementation/** changed)
  rust-tests:
    name: Rust 🦀 Tests
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.rust-changed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install rustfmt
        run: rustup component add rustfmt

      - name: "Check formatting: rust-cli"
        working-directory: rust-implementation/rust-cli
        run: cargo fmt -- --check

      - name: "Run tests: rust-cli"
        working-directory: rust-implementation/rust-cli
        run: cargo test --verbose

      - name: "Check formatting: rust-engine"
        working-directory: rust-implementation/rust-engine
        run: cargo fmt -- --check

      - name: "Run tests: rust-engine"
        working-directory: rust-implementation/rust-engine
        run: cargo test --verbose
